{
    "javascriptLines":[
        "function Main(){ ",
        "import React from \"react\"; ",
        "const mongoose = require('mongoose'); ",
        "const app = express(); ",
        "const funcName = () =>{ ",
        "console.log('Hello World'); ",
        "var n = null; ",
        "var canv = document.getElementById(\"root\"); ",
        "alert(\"Hello There\"); ",
        "let search = document.querySelector(\"#s\"); ",
        "axios.get(url, params) ",
        "ul.classList.add(\"list\"); ",
        "console.log(`${youName} is amazing`); ",
        "if (!start || !target || start === target) { ",
        "nodes[start].distance = 0; ",
        "let Nodes = Object.keys(nodes); ",
        "while (Nodes.length) { ",
        "let current = closest(nodes, Nodes); ",
        "current = closest(nodes, Nodes) ",
        "Animate.push(current); ",
        "return \"success!\"; ",
        "index = i; ",
        "if (!current || current.total > nodes[Nodes[i]].total) { ",
        "Nodes.splice(index, 1); ",
        "let coordinates = id.split(\"-\"); ",
        "if (board[x + 1] && board[x + 1][y]) { ",
        "function Distance(nodeOne, nodeTwo) { ",
        "let y2 = parse(target[1]); ",
        "if (x2 < x1 && y1 === y2) { ",
        "return [1.5, null, \"down\"]; ",
        "let xChange = Math.abs(xOne - xTwo); ",
        "module.exports = astar; ",
        "nodes[start].direction = \"up\"; ",
        "let relevantIds = [board.start, board.target]; ",
        "Object.keys(board.nodes).forEach(node => { ",
        "board.walls.push(current); ",
        "let possibleRows = []; ",
        "let random = Math.floor(Math.random() * Rows.length); ",
        "if (rowEnd - (currentRow + 2) > colEnd - colStart) { ",
        "let r = parse(node.split(\"-\")[0]); ",
        "module.exports = recursive; ",
        "const weighted = require(\"weighted.js\"); ",
        "let speed = board.speed === \"fast\" ? 0 : board.speed === \"average\"; ",
        "if (type === \"weighted\") { ",
        "console.log(\"Failure.\"); ",
        "board.reset() ",
        "board.toggleButtons(); ",
        "timeout(index + 1); ",
        "let currentHtml = document.getElementById(currentNode.id); ",
        "function Board(height, width) { ",
        "this.previous = null; ",
        "Board.initialise = function() { ",
        "let board = document.getElementById(\"board\"); ",
        "currentElement.onmousedown = (e) => { ",
        "e.preventDefault(); ",
        "let r = parse(coordinates[0]); ",
        "app.get(\"/\", (req, res) => { ",
        "toDispatch.push([start, left, right]); ",
        "setTimeout(() => { ",
        "function mergeSort(stateArray, dispatch, speed) { ",
        "actualFirst = mergeSort(first, dispatch, start, index - 1, obj) ",
        "second[0][1] = indexToPush++; ",
        "sortedArray.push(second.shift()); ",
        "dispatch(setCurrent(array.map((num, index) => index))); ",
        "while (!sorted) { ",
        "if (array[i] > array[i + 1]) { ",
        "newObj = {...oldObj} ",
        "let [num,setNum] = useState(0); ",
        "cosnt {key} = object "
            
    ]
}